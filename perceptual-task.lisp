;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 
;;; Author      : Frank Tamborello
;;; Copyright   : (c)2010 Frank Tamborello/
;;;		: The University of Texas Health Science Center at Houston 
;;;		: (UTHSC-H), All Rights Reserved
;;; Availability: public domain
;;; Address     : University of Texas Health Science Center at Houston
;;;             : School of Health Information Sciences
;;;		: 7000 Fannin, Ste. 600
;;;             : Houston, TX 77030
;;;             : franklin.tamborello@uth.tmc.edu
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 
;;; Filename    : perceptual-task.lisp
;;; Version     : r1
;;;
;;; Description : A very simple experiment to demonstrate an ACT-R
;;;		spatial cognitive module;;;;;; Usage	: After loading the spatial module, this file, and the model,;;;		call do-exp.
;;; 
;;; Bugs        : none
;;; 
;;; Todo        : 
;;; 
;;; ----- History -----
;;; 2010.06.23 fpt [r1]
;;;	: inception;;; 2010.06.24 fpt [r2];;;	: do-exp now can run with a visible or invisible device;;;	: build-vis-locs-for now up & running;;;     : vis-loc-to-obj now makes visual objects, model now runs with a ;;;	visible device;;; 2010.06.25 fpt [r3];;;	: bug fix for ACT-R's focus ring, do-exp can now run visible-only;;; 2010.07.03 fpt [r1];;;	: name change from "exp2.lisp" r4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar *space-width* 800)(defvar *space-height* 800)(defvar *exp-win* nil);;; Device Methods(defmethod cursor-to-vis-loc ((device list))   nil)(defmethod build-vis-locs-for ((device window) (vismod vision-module))   (bvlf-helper (subviews device)));; (build-vis-locs-for (subviews *exp*) nil)(defun bvlf-helper (device)   (cond    ((null device) nil)    (t (cons (bvlf-helper2 (car device))             (bvlf-helper (cdr device))))))(defun bvlf-helper2 (sv)   (case (class-name (class-of sv))     (square (define-chunks-fct                `((isa polygon-feature                       screen-x ,(point-h (view-position sv))                       screen-y ,(point-v (view-position sv))                       width ,(point-h (view-size sv))                       height ,(point-v (view-size sv))                       color blue                       kind square                       value square))))     (triangle (define-chunks-fct                `((isa polygon-feature                       screen-x ,(point-h (view-position sv))                       screen-y ,(point-v (view-position sv))                       width ,(point-h (view-size sv))                       height ,(point-v (view-size sv))                       color red                       kind triangle                       value triangle))))     (blue-arrow (define-chunks-fct                `((isa polygon-feature                       screen-x ,(point-h (view-position sv))                       screen-y ,(point-v (view-position sv))                       width ,(point-h (view-size sv))                       height ,(point-v (view-size sv))                       color blue                       kind arrow                       value arrow))))     (red-arrow (define-chunks-fct                `((isa polygon-feature                       screen-x ,(point-h (view-position sv))                       screen-y ,(point-v (view-position sv))                       width ,(point-h (view-size sv))                       height ,(point-v (view-size sv))                       color red                       kind arrow                       value arrow))))))   (defmethod vis-loc-to-obj ((device window) vis-loc)   (case (chunk-slot-value-fct vis-loc 'kind)         (square (car (define-chunks-fct                    `((isa square                           screen-pos ,vis-loc                           value ,(chunk-slot-value-fct vis-loc 'value)                           status nil                           color ,(chunk-slot-value-fct vis-loc 'color)                           height ,(chunk-slot-value-fct vis-loc 'height)                           width ,(chunk-slot-value-fct vis-loc 'width))))))         (triangle (car (define-chunks-fct                    `((isa triangle                           screen-pos ,vis-loc                           value ,(chunk-slot-value-fct vis-loc 'value)                           status nil                           color ,(chunk-slot-value-fct vis-loc 'color)                           height ,(chunk-slot-value-fct vis-loc 'height)                           width ,(chunk-slot-value-fct vis-loc 'width))))))         (arrow (case (chunk-slot-value-fct vis-loc 'color)                   (blue (car (define-chunks-fct                    `((isa arrow                           screen-pos ,vis-loc                           value ,(chunk-slot-value-fct vis-loc 'value)                           status nil                           color ,(chunk-slot-value-fct vis-loc 'color)                           height ,(chunk-slot-value-fct vis-loc 'height)                           width ,(chunk-slot-value-fct vis-loc 'width)                           intrinsicality t                           orientation up)))))                   (red (car (define-chunks-fct                    `((isa arrow                           screen-pos ,vis-loc                           value ,(chunk-slot-value-fct vis-loc 'value)                           status nil                           color ,(chunk-slot-value-fct vis-loc 'color)                           height ,(chunk-slot-value-fct vis-loc 'height)                           width ,(chunk-slot-value-fct vis-loc 'width)                           intrinsicality t                           orientation down)))))))));; test code#|(vis-loc-to-obj nil (car (car (build-vis-locs-for (subviews *exp*) nil))))(vis-loc-to-obj nil (car (nth 2 (build-vis-locs-for (subviews *exp*) nil))))|#(defmethod device-handle-keypress ((device window) key)   (model-output "Model pressed key ~c" key));;; the experiment
(defun do-exp ()
   (reset)   (chunk-type (polygon-feature (:include visual-location)) regular)   (chunk-type (polygon (:include visual-object)) sides)   (chunk-type (square (:include polygon)) (sides 4))   (chunk-type (triangle (:include polygon)) (sides 3))   ;; example of an extended visual-object chunk-type including the information   ;; necessary to come from object recognition to build an intrinsic spatial    ;; representation   (chunk-type (intrinsic-visual-object (:include visual-object))                intrinsicality orientation)   (chunk-type (arrow                 (:include intrinsic-visual-object)) (intrinsicality t) sides)   (let* ((square (make-instance 'square))          (triangle (make-instance 'triangle))          (blue-arrow (make-instance 'blue-arrow))          (red-arrow (make-instance 'red-arrow)))     (when *exp-win* (window-close *exp-win*))     (setf *exp-win* (make-instance 'experiment-window))     (add-subviews *exp-win* square triangle blue-arrow red-arrow)     (install-device *exp-win*)     (proc-display)     (run 2 :real-time t)));;; GUI stuff(defclass experiment-window (color-dialog)   ()   (:default-initargs     :view-size #@(800 800)     :view-position #@(50 50)     :window-title "Experiment 2"     :close-box-p t))(defclass square (simple-view)   ((color :accessor color :initarg :color :initform *blue-color*))   (:default-initargs     :view-size #@(50 50)     :view-position #@(125 375)))(defmethod view-draw-contents ((self square))   (with-focused-view self     (with-fore-color (color self)       (paint-rect         self         #@(0 0)         (make-point          (point-h (view-size self))         (point-v (view-size self)))))))(defclass triangle (simple-view)   ((color :accessor color :initarg :color :initform *red-color*))   (:default-initargs     :view-size #@(50 50)     :view-position #@(625 375)))(defmethod view-draw-contents ((self triangle))  (let ((x (/ (point-h (view-size self)) 2))        (y 0))  (progn    (move-to self x y)    (start-polygon self)    (line-to self              (point-h 0)             (point-v (view-size self)))    (line-to self              (point-h (view-size self))             (point-v (view-size self)))    (line-to self x y)    (with-fore-color (color self)      (fill-polygon self *black-pattern* (get-polygon self))))))(defclass blue-arrow (simple-view)   ((color :accessor color :initarg :color :initform *blue-color*))   (:default-initargs     :view-size #@(40 80)     :view-position #@(380 310)))(defmethod view-draw-contents ((self blue-arrow))  (let ((x (/ (point-h (view-size self)) 2))        (y 0))  (progn    (move-to self x y)    (start-polygon self)    (line-to self 0 30)    (line-to self 10 30)    (line-to self 10 80)    (line-to self 30 80)    (line-to self 30 30)    (line-to self 40 30)    (line-to self x y)    (with-fore-color (color self)      (fill-polygon self *black-pattern* (get-polygon self))))))(defclass red-arrow (simple-view)   ((color :accessor color :initarg :color :initform *red-color*))   (:default-initargs     :view-size #@(40 80)     :view-position #@(380 410)))(defmethod view-draw-contents ((self red-arrow))  (let ((x (/ (point-h (view-size self)) 2))        (y 0))  (progn    (move-to self x y)    (start-polygon self)    (line-to self 10 y)    (line-to self 10 50)    (line-to self 0 50)    (line-to self x 80)    (line-to self 40 50)    (line-to self 30 50)    (line-to self 30 0)    (line-to self x y)    (with-fore-color (color self)      (fill-polygon self *black-pattern* (get-polygon self))))));;; test code#|(setf *exp* (make-instance 'experiment-window))(setf *square* (make-instance 'square))(setf *triangle* (make-instance 'triangle))(setf *blue-arrow* (make-instance 'blue-arrow))(setf *red-arrow* (make-instance 'red-arrow))(add-subviews *exp* *square*)(add-subviews *exp* *triangle*)(add-subviews *exp* *blue-arrow*)(add-subviews *exp* *red-arrow*)(remove-subviews *exp* *arrow*)|#