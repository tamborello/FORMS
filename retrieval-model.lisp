;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;; Author      : Frank Tamborello;;; Copyright   : (c)2010 Frank Tamborello/;;;		: The University of Texas Health Science Center at Houston ;;;		: (UTHSC-H), All Rights Reserved;;; Availability: public domain;;; Address     : University of Texas Health Science Center at Houston;;;             : School of Health Information Sciences;;;		: 7000 Fannin, Ste. 600;;;             : Houston, TX 77030;;;             : franklin.tamborello@uth.tmc.edu;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; This library is free software; you can redistribute it and/or;;; modify it under the terms of the Lisp Lesser General Public;;; License: the GNU Lesser General Public License as published by the;;; Free Software Foundation (either version 2.1 of the License, ;;; or, at your option, any later version),;;; and the Franz, Inc Lisp-specific preamble.;;;;;; This library is distributed in the hope that it will be useful,;;; but WITHOUT ANY WARRANTY; without even the implied warranty of;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU;;; Lesser General Public License for more details.;;;;;; You should have received a copy of the Lisp Lesser General Public;;; License along with this library; if not, write to the Free Software;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA;;; and see Franz, Inc.'s preamble to the GNU Lesser General Public License,;;; http://opensource.franz.com/preamble.html.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;; Filename    : retrieval model.lisp;;; Version     : r5;;; ;;; Description : A very simple model to demonstraint the spatial module. ;;;		The task is: ;;;		1. study the stimuli;;;		2. stimuli go away;;;		3. Wait for instruction, find-square, find the square from memory.;;;		4. Wait for instruction, find-square-relative-to-blue-arrow,;;;		do that from memory.;;;		5. Wait for instruction, find-square-relative-to-red-arrow,;;;		do that from memory.;;;;;; Usage	: Load the spatial module, exp2.lisp, and this file. Call do-exp.;;;;;; Bugs        : none;;; ;;; todo        : ;;; ;;; ----- History -----;;; 2010.06.30 fpt [r1];;;	: inception from exp2-model.lisp r5;;; 2010.07.01 fpt [r2];;;	: Switch to a strategy wherein the model first retrieves spatial-objects,;;;	then retrieves any spatial-representation referencing those objects.;;;	: "find the square" case works;;; 2010.07.03 fpt [r3];;;	: Use spatial module r27 now, which auto-clears the imaginal buffer;;;	when its chunk is used to pop-out ifor;;;	: "find the square relative to the blue arrow" now works;;; 2010.07.03 fpt [r4];;;	: All three task scenarios now work.;;; 2010.07.03 fpt [r5];;;	: spatial module r27 broke the perceptual model, so I change it back ;;;	to not auto clearing imaginal in r28. Consequently the visual search ;;;	productions now must clear the imaginal buffer.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(clear-all)(define-model retrieval-model    (sgp :v t :trace-detail medium :needs-mouse nil :show-focus t :er t :esc t :rt -1)    (chunk-type spatial-task task state value color target)  (chunk-type (polygon-feature (:include visual-location)) regular)  (chunk-type (polygon (:include visual-object)) sides)  (chunk-type (square (:include polygon)) (sides 4))  (chunk-type (triangle (:include polygon)) (sides 3))  (chunk-type (intrinsic-visual-object (:include visual-object))                intrinsicality orientation)  (chunk-type (arrow                 (:include intrinsic-visual-object)) (intrinsicality t) sides)    (add-dm   (study-stimuli isa spatial-task task study-stimuli state start)   (find-square isa spatial-task                task find-square state retrieve value square color blue target square)   (find-square-relative-to-blue-arrow    isa spatial-task task find-square-relative-to-blue-arrow     state retrieve value arrow color blue target square)   (find-square-relative-to-red-arrow    isa spatial-task task find-square-relative-to-red-arrow     state retrieve value arrow color red target square))  (set-hand-location right 19 4)    (goal-focus study-stimuli)   ;;;;; study phase(p start-studying   =goal>	isa spatial-task        task study-stimuli        state start   =visual-location>	isa visual-location==>   =goal>   	state attending-location   +visual>   	isa move-attention        screen-pos =visual-location)(p got-non-intrinsic-visual-make-spatial   =visual>	isa visual-object        value =val   =goal>	isa spatial-task        state attending-location        task study-stimuli==>   !eval! (schedule-clear-buffer 'imaginal 0 :priority :max)   +spatial-object>	isa spatial-object        shape =val        perceptual-reference =visual   =goal>	state making-spatial-representations) (p got-intrinsic-visual-make-spatial   =visual>	isa intrinsic-visual-object        value =val        intrinsicality =int	orientation =ori   =goal>	isa spatial-task        state attending-location        task study-stimuli==>   +spatial-object>	isa spatial-object        shape =val        intrinsicality =int	orientation =ori        perceptual-reference =visual   =goal>   	state making-spatial-representations)(p done-making-spatials-find-visloc   =goal>   	isa spatial-task        state making-spatial-representations   =spatial-object>	isa spatial-object==>   +visual-location>	isa visual-location        :attended nil   =goal>	state finding-new-loc)(p attend-a-loc   =goal>	isa spatial-task        task study-stimuli        state finding-new-loc   =visual-location>	isa visual-location==>   =goal>	state attending-location   +visual>	isa move-attention        screen-pos =visual-location)(p find-visloc-error   =goal>	isa spatial-task        task study-stimuli        state finding-new-loc   ?visual-location>	state error==>   +visual-location>	isa visual-location);;;;;;;===== end study phase(p retrieve-target-spatial-object   =goal>	isa spatial-task        state retrieve        target =trg   ?retrieval>	state free==>   +retrieval>	isa spatial-object        shape =trg   =goal>	state retrieving-target-so);; goal specifies only the target, so just retrieve that & respond(p got-target-and-eq-value-retrieve-sr   =goal>	isa spatial-task        state retrieving-target-so        target =shp        value =shp   =retrieval>	isa spatial-object        shape =shp==>   =goal>	target =retrieval        state retrieving-sr   +retrieval>	isa abstract-spatial-representation        identity =retrieval);;;;;; goal specifies a target & a viewpoint, so retrieve both;;;(p got-target-and-ne-value-so-retrieve-viewpoint-vo   =goal>	isa spatial-task        state retrieving-target-so        target =shp        - target =val        value =val        color =col   =retrieval>	isa spatial-object        shape =shp==>   =goal>	target =retrieval        state retrieving-viewpoint-vo   +retrieval>	isa visual-object        value =val        color =col)(p got-viewpoint-vo-retrieve-viewpoint-so   =goal>	isa spatial-task        state retrieving-viewpoint-vo        - target =val        value =val        color =col   =retrieval>	isa visual-object        value =shp        color =col==>   +retrieval>	isa spatial-object        perceptual-reference =retrieval        shape =shp   =goal>	state retrieving-viewpoint-so-from-vo)(p got-viewpoint-so-put-into-goal   =goal>	isa spatial-task        state retrieving-viewpoint-so-from-vo        target =trg        value =val   =retrieval>	isa spatial-object        shape =val==>   =goal>	value =retrieval        state retrieving-sr   +retrieval>	isa intrinsic-spatial-representation        identity =trg        viewpoint =retrieval);;;;;;; respond from retrieved spatial representation;;;;(p respond-from-retrieval-left   =goal>	isa spatial-task        state retrieving-sr        target =trg   =retrieval>	isa abstract-spatial-representation        identity =trg        bearing left   ?manual>	preparation free==>   +manual>	isa peck-recoil        hand right        finger index        r 0        theta 0   =goal>	state responded   +visual>	isa clear)(p respond-from-retrieval-right   =goal>	isa spatial-task        state retrieving-sr        target =trg   =retrieval>	isa abstract-spatial-representation        identity =trg        bearing right   ?manual>	preparation free==>   +manual>	isa peck-recoil        hand right        finger ring        r 0        theta 0   =goal>	state responded   +visual>	isa clear);;; The declarative module failed to retrieve an intrinsic spatial relationship chunk,;;; retrieve the components specified by the goal & make a new intrinsic-sr chunk from;;; those(p no-ifor-make-new-one   =goal>   	isa spatial-task	state retrieving-sr        value =val        target =trg   ?retrieval>	state error==>   +imaginal>	=val   +retrieval>	=trg   =goal>	state retrieving-target-so-for-new-ifor)(p make-spatial-chunks   =goal>	isa spatial-task        state retrieving-target-so-for-new-ifor   ?imaginal>	buffer full   =retrieval>	isa spatial-object        shape =shp        perceptual-reference =p-ref==>   +spatial-object>	isa spatial-object        shape =shp        perceptual-reference =p-ref   =goal>	state making-spatial-chunks);;; respond having just made spatial representations from others retrieved(p has-spatial-respond-intrinsic-left   =goal>	isa spatial-task        state making-spatial-chunks   =intrinsic>	isa intrinsic-spatial-representation        bearing left   ?manual>	preparation free==>   +manual>	isa peck-recoil        hand right        finger index        r 0        theta 0   =goal>	state responded)(p has-spatial-respond-intrinsic-right   =goal>	isa spatial-task        state making-spatial-chunks        target =trg   =intrinsic>	isa intrinsic-spatial-representation        bearing right   ?manual>	preparation free==>   +manual>	isa peck-recoil        hand right        finger ring        r 0        theta 0   =goal>	state responded)(p has-spatial-respond-egocentric-left   =goal>	isa spatial-task        state making-spatial-chunks   =eye-central>	isa eye-centered-spatial-representation        bearing left   ?manual>	preparation free==>   +manual>	isa peck-recoil        hand right        finger index        r 0        theta 0   =goal>	state responded)(p has-spatial-respond-egocentric-right   =goal>	isa spatial-task        state making-spatial-chunks   =eye-central>	isa eye-centered-spatial-representation        bearing right   ?manual>	preparation free==>   +manual>	isa peck-recoil        hand right        finger ring        r 0        theta 0   =goal>	state responded)(p has-spatial-respond-allocentric-left   =goal>	isa spatial-task        state making-spatial-chunks   =allocentral>	isa allocentric-spatial-representation        bearing left   ?manual>	preparation free==>   +manual>	isa peck-recoil        hand right        finger index        r 0        theta 0   =goal>	state responded)(p has-spatial-respond-allocentric-right   =goal>	isa spatial-task        state making-spatial-chunks   =allocentral>	isa allocentric-spatial-representation        bearing right   ?manual>	preparation free==>   +manual>	isa peck-recoil        hand right        finger ring        r 0        theta 0   =goal>	state responded)   (spp got-intrinsic-visual-make-spatial :u 1))